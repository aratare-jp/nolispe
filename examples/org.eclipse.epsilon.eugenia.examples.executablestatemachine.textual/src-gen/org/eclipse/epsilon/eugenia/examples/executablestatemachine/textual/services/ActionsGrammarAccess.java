/*
* generated by Xtext
*/

package org.eclipse.epsilon.eugenia.examples.executablestatemachine.textual.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ActionsGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSetParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIncParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDecParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIfParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPrintParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Action:
		//	Set | Inc | Dec | If | Print;
		public ParserRule getRule() { return rule; }

		//Set | Inc | Dec | If | Print
		public Alternatives getAlternatives() { return cAlternatives; }

		//Set
		public RuleCall getSetParserRuleCall_0() { return cSetParserRuleCall_0; }

		//Inc
		public RuleCall getIncParserRuleCall_1() { return cIncParserRuleCall_1; }

		//Dec
		public RuleCall getDecParserRuleCall_2() { return cDecParserRuleCall_2; }

		//If
		public RuleCall getIfParserRuleCall_3() { return cIfParserRuleCall_3; }

		//Print
		public RuleCall getPrintParserRuleCall_4() { return cPrintParserRuleCall_4; }
	}

	public class SetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Set");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarIDTerminalRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		private final Keyword cSpaceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueINTTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//Set:
		//	"set " var=ID " " value=INT;
		public ParserRule getRule() { return rule; }

		//"set " var=ID " " value=INT
		public Group getGroup() { return cGroup; }

		//"set "
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }

		//var=ID
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }

		//ID
		public RuleCall getVarIDTerminalRuleCall_1_0() { return cVarIDTerminalRuleCall_1_0; }

		//" "
		public Keyword getSpaceKeyword_2() { return cSpaceKeyword_2; }

		//value=INT
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_3_0() { return cValueINTTerminalRuleCall_3_0; }
	}

	public class IncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Inc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarIDTerminalRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		
		//Inc:
		//	"inc " var=ID;
		public ParserRule getRule() { return rule; }

		//"inc " var=ID
		public Group getGroup() { return cGroup; }

		//"inc "
		public Keyword getIncKeyword_0() { return cIncKeyword_0; }

		//var=ID
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }

		//ID
		public RuleCall getVarIDTerminalRuleCall_1_0() { return cVarIDTerminalRuleCall_1_0; }
	}

	public class DecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDecKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarIDTerminalRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		
		//Dec:
		//	"dec " var=ID;
		public ParserRule getRule() { return rule; }

		//"dec " var=ID
		public Group getGroup() { return cGroup; }

		//"dec "
		public Keyword getDecKeyword_0() { return cDecKeyword_0; }

		//var=ID
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }

		//ID
		public RuleCall getVarIDTerminalRuleCall_1_0() { return cVarIDTerminalRuleCall_1_0; }
	}

	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarIDTerminalRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueINTTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//If:
		//	"if " var=ID "=" value=INT;
		public ParserRule getRule() { return rule; }

		//"if " var=ID "=" value=INT
		public Group getGroup() { return cGroup; }

		//"if "
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//var=ID
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }

		//ID
		public RuleCall getVarIDTerminalRuleCall_1_0() { return cVarIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=INT
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_3_0() { return cValueINTTerminalRuleCall_3_0; }
	}

	public class PrintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Print");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMsgAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMsgSTRINGTerminalRuleCall_2_0 = (RuleCall)cMsgAssignment_2.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Print:
		//	"print " "\"" msg=STRING "\"";
		public ParserRule getRule() { return rule; }

		//"print " "\"" msg=STRING "\""
		public Group getGroup() { return cGroup; }

		//"print "
		public Keyword getPrintKeyword_0() { return cPrintKeyword_0; }

		//"\""
		public Keyword getQuotationMarkKeyword_1() { return cQuotationMarkKeyword_1; }

		//msg=STRING
		public Assignment getMsgAssignment_2() { return cMsgAssignment_2; }

		//STRING
		public RuleCall getMsgSTRINGTerminalRuleCall_2_0() { return cMsgSTRINGTerminalRuleCall_2_0; }

		//"\""
		public Keyword getQuotationMarkKeyword_3() { return cQuotationMarkKeyword_3; }
	}
	
	
	private ActionElements pAction;
	private SetElements pSet;
	private IncElements pInc;
	private DecElements pDec;
	private IfElements pIf;
	private PrintElements pPrint;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ActionsGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.epsilon.eugenia.examples.executablestatemachine.textual.Actions".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Action:
	//	Set | Inc | Dec | If | Print;
	public ActionElements getActionAccess() {
		return (pAction != null) ? pAction : (pAction = new ActionElements());
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//Set:
	//	"set " var=ID " " value=INT;
	public SetElements getSetAccess() {
		return (pSet != null) ? pSet : (pSet = new SetElements());
	}
	
	public ParserRule getSetRule() {
		return getSetAccess().getRule();
	}

	//Inc:
	//	"inc " var=ID;
	public IncElements getIncAccess() {
		return (pInc != null) ? pInc : (pInc = new IncElements());
	}
	
	public ParserRule getIncRule() {
		return getIncAccess().getRule();
	}

	//Dec:
	//	"dec " var=ID;
	public DecElements getDecAccess() {
		return (pDec != null) ? pDec : (pDec = new DecElements());
	}
	
	public ParserRule getDecRule() {
		return getDecAccess().getRule();
	}

	//If:
	//	"if " var=ID "=" value=INT;
	public IfElements getIfAccess() {
		return (pIf != null) ? pIf : (pIf = new IfElements());
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}

	//Print:
	//	"print " "\"" msg=STRING "\"";
	public PrintElements getPrintAccess() {
		return (pPrint != null) ? pPrint : (pPrint = new PrintElements());
	}
	
	public ParserRule getPrintRule() {
		return getPrintAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
