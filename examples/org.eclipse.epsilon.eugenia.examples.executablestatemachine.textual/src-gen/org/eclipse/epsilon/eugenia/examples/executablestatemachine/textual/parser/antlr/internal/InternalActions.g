/*
* generated by Xtext
*/
grammar InternalActions;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.epsilon.eugenia.examples.executablestatemachine.textual.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.epsilon.eugenia.examples.executablestatemachine.textual.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.epsilon.eugenia.examples.executablestatemachine.textual.services.ActionsGrammarAccess;

}

@parser::members {

 	private ActionsGrammarAccess grammarAccess;
 	
    public InternalActionsParser(TokenStream input, ActionsGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Action";	
   	}
   	
   	@Override
   	protected ActionsGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	 iv_ruleAction=ruleAction 
	 { $current=$iv_ruleAction.current; } 
	 EOF 
;

// Rule Action
ruleAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getActionAccess().getSetParserRuleCall_0()); 
    }
    this_Set_0=ruleSet
    { 
        $current = $this_Set_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getActionAccess().getIncParserRuleCall_1()); 
    }
    this_Inc_1=ruleInc
    { 
        $current = $this_Inc_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getActionAccess().getDecParserRuleCall_2()); 
    }
    this_Dec_2=ruleDec
    { 
        $current = $this_Dec_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getActionAccess().getIfParserRuleCall_3()); 
    }
    this_If_3=ruleIf
    { 
        $current = $this_If_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getActionAccess().getPrintParserRuleCall_4()); 
    }
    this_Print_4=rulePrint
    { 
        $current = $this_Print_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSet
entryRuleSet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetRule()); }
	 iv_ruleSet=ruleSet 
	 { $current=$iv_ruleSet.current; } 
	 EOF 
;

// Rule Set
ruleSet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='set ' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSetAccess().getSetKeyword_0());
    }
(
(
		lv_var_1_0=RULE_ID
		{
			newLeafNode(lv_var_1_0, grammarAccess.getSetAccess().getVarIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSetRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"var",
        		lv_var_1_0, 
        		"ID");
	    }

)
)	otherlv_2=' ' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSetAccess().getSpaceKeyword_2());
    }
(
(
		lv_value_3_0=RULE_INT
		{
			newLeafNode(lv_value_3_0, grammarAccess.getSetAccess().getValueINTTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSetRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleInc
entryRuleInc returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIncRule()); }
	 iv_ruleInc=ruleInc 
	 { $current=$iv_ruleInc.current; } 
	 EOF 
;

// Rule Inc
ruleInc returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='inc ' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIncAccess().getIncKeyword_0());
    }
(
(
		lv_var_1_0=RULE_ID
		{
			newLeafNode(lv_var_1_0, grammarAccess.getIncAccess().getVarIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIncRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"var",
        		lv_var_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleDec
entryRuleDec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDecRule()); }
	 iv_ruleDec=ruleDec 
	 { $current=$iv_ruleDec.current; } 
	 EOF 
;

// Rule Dec
ruleDec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='dec ' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDecAccess().getDecKeyword_0());
    }
(
(
		lv_var_1_0=RULE_ID
		{
			newLeafNode(lv_var_1_0, grammarAccess.getDecAccess().getVarIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDecRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"var",
        		lv_var_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleIf
entryRuleIf returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfRule()); }
	 iv_ruleIf=ruleIf 
	 { $current=$iv_ruleIf.current; } 
	 EOF 
;

// Rule If
ruleIf returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if ' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfAccess().getIfKeyword_0());
    }
(
(
		lv_var_1_0=RULE_ID
		{
			newLeafNode(lv_var_1_0, grammarAccess.getIfAccess().getVarIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIfRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"var",
        		lv_var_1_0, 
        		"ID");
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIfAccess().getEqualsSignKeyword_2());
    }
(
(
		lv_value_3_0=RULE_INT
		{
			newLeafNode(lv_value_3_0, grammarAccess.getIfAccess().getValueINTTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIfRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRulePrint
entryRulePrint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrintRule()); }
	 iv_rulePrint=rulePrint 
	 { $current=$iv_rulePrint.current; } 
	 EOF 
;

// Rule Print
rulePrint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='print ' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPrintAccess().getPrintKeyword_0());
    }
	otherlv_1='"' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPrintAccess().getQuotationMarkKeyword_1());
    }
(
(
		lv_msg_2_0=RULE_STRING
		{
			newLeafNode(lv_msg_2_0, grammarAccess.getPrintAccess().getMsgSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"msg",
        		lv_msg_2_0, 
        		"STRING");
	    }

)
)	otherlv_3='"' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPrintAccess().getQuotationMarkKeyword_3());
    }
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


