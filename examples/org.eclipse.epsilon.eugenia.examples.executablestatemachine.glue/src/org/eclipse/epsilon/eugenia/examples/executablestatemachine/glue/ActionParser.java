/*********************************************************************
* Copyright (c) 2008 The University of York.
*
* This program and the accompanying materials are made
* available under the terms of the Eclipse Public License 2.0
* which is available at https://www.eclipse.org/legal/epl-2.0/
*
* SPDX-License-Identifier: EPL-2.0
**********************************************************************/
package org.eclipse.epsilon.eugenia.examples.executablestatemachine.glue;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.epsilon.eugenia.examples.executablestatemachine.textual.ActionsStandaloneSetupGenerated;
import org.eclipse.epsilon.eugenia.examples.executablestatemachine.textual.actions.Action;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.validation.CheckMode;
import org.eclipse.xtext.validation.IResourceValidator;
import org.eclipse.xtext.validation.Issue;

import com.google.inject.Inject;
import com.google.inject.Injector;
import com.google.inject.Provider;

/**
 * A parser for the ESM action language, that delegates to
 * the Xtext generated code.
 * 
 * This implementation is based on the main fragment generated by
 * Xtext when setting "generateJavaMain" to true in the MWE file
 */
public class ActionParser {

	protected ActionParser() {}
	
	public static ActionParser create() {
		Injector injector = new ActionsStandaloneSetupGenerated().createInjectorAndDoEMFRegistration();
		return injector.getInstance(ActionParser.class);
	}
	
	@Inject 
	private Provider<ResourceSet> resourceSetProvider;
	
	@Inject
	private IResourceValidator validator;
	
	public Action parse(String action) {
		Resource resource = loadResource(action);
		return (validate(resource).isEmpty()) ? getRoot(resource) : null;
	}
	
	public Collection<Issue> validate(String action) {
		return validate(loadResource(action));
	}

	private Collection<Issue> validate(Resource resource) {
		List<Issue> issues = validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);
		
		if (!issues.isEmpty()) {
			StringBuilder message = new StringBuilder();
			message.append("Errors encountered whilst parsing: ");
			for (Issue issue : issues) {
				message.append(issue.toString());
				message.append(' ');
			}
		}
		
		return issues;
	}
	
	private Action getRoot(Resource resource) {
		EList<EObject> contents = resource.getContents();
		return contents.isEmpty() ? null : (Action)contents.get(0);
	}

	private Resource loadResource(String action) {
		try {
			ResourceSet set = resourceSetProvider.get();
			Resource resource = set.createResource(URI.createFileURI("tmp." + getExtension()));
			resource.load(new ByteArrayInputStream(action.getBytes( "UTF-8")), null);
			return resource;
		
		} catch (IOException e) {
			throw new IllegalStateException("ActionParser could not load an XText resource.");
		}
	}
	
	/*
	 * This must match the extension specified for the 
	 * XText DSL in the MWE file.
	 */
	private String getExtension() {
		return "esm_actions";
	}
}
