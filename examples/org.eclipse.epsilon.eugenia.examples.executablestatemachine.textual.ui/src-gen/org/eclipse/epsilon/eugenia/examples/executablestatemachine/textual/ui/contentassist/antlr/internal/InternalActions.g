/*
* generated by Xtext
*/
grammar InternalActions;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.eclipse.epsilon.eugenia.examples.executablestatemachine.textual.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipse.epsilon.eugenia.examples.executablestatemachine.textual.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.eclipse.epsilon.eugenia.examples.executablestatemachine.textual.services.ActionsGrammarAccess;

}

@parser::members {
 
 	private ActionsGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ActionsGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleAction
entryRuleAction 
:
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;

// Rule Action
ruleAction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getActionAccess().getAlternatives()); }
(rule__Action__Alternatives)
{ after(grammarAccess.getActionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSet
entryRuleSet 
:
{ before(grammarAccess.getSetRule()); }
	 ruleSet
{ after(grammarAccess.getSetRule()); } 
	 EOF 
;

// Rule Set
ruleSet
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSetAccess().getGroup()); }
(rule__Set__Group__0)
{ after(grammarAccess.getSetAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInc
entryRuleInc 
:
{ before(grammarAccess.getIncRule()); }
	 ruleInc
{ after(grammarAccess.getIncRule()); } 
	 EOF 
;

// Rule Inc
ruleInc
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIncAccess().getGroup()); }
(rule__Inc__Group__0)
{ after(grammarAccess.getIncAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDec
entryRuleDec 
:
{ before(grammarAccess.getDecRule()); }
	 ruleDec
{ after(grammarAccess.getDecRule()); } 
	 EOF 
;

// Rule Dec
ruleDec
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDecAccess().getGroup()); }
(rule__Dec__Group__0)
{ after(grammarAccess.getDecAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIf
entryRuleIf 
:
{ before(grammarAccess.getIfRule()); }
	 ruleIf
{ after(grammarAccess.getIfRule()); } 
	 EOF 
;

// Rule If
ruleIf
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfAccess().getGroup()); }
(rule__If__Group__0)
{ after(grammarAccess.getIfAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrint
entryRulePrint 
:
{ before(grammarAccess.getPrintRule()); }
	 rulePrint
{ after(grammarAccess.getPrintRule()); } 
	 EOF 
;

// Rule Print
rulePrint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrintAccess().getGroup()); }
(rule__Print__Group__0)
{ after(grammarAccess.getPrintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Action__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getSetParserRuleCall_0()); }
	ruleSet
{ after(grammarAccess.getActionAccess().getSetParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getActionAccess().getIncParserRuleCall_1()); }
	ruleInc
{ after(grammarAccess.getActionAccess().getIncParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getActionAccess().getDecParserRuleCall_2()); }
	ruleDec
{ after(grammarAccess.getActionAccess().getDecParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getActionAccess().getIfParserRuleCall_3()); }
	ruleIf
{ after(grammarAccess.getActionAccess().getIfParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getActionAccess().getPrintParserRuleCall_4()); }
	rulePrint
{ after(grammarAccess.getActionAccess().getPrintParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Set__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Set__Group__0__Impl
	rule__Set__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAccess().getSetKeyword_0()); }

	'set ' 

{ after(grammarAccess.getSetAccess().getSetKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Set__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Set__Group__1__Impl
	rule__Set__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAccess().getVarAssignment_1()); }
(rule__Set__VarAssignment_1)
{ after(grammarAccess.getSetAccess().getVarAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Set__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Set__Group__2__Impl
	rule__Set__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAccess().getSpaceKeyword_2()); }

	' ' 

{ after(grammarAccess.getSetAccess().getSpaceKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Set__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Set__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAccess().getValueAssignment_3()); }
(rule__Set__ValueAssignment_3)
{ after(grammarAccess.getSetAccess().getValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Inc__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Inc__Group__0__Impl
	rule__Inc__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Inc__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncAccess().getIncKeyword_0()); }

	'inc ' 

{ after(grammarAccess.getIncAccess().getIncKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Inc__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Inc__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Inc__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncAccess().getVarAssignment_1()); }
(rule__Inc__VarAssignment_1)
{ after(grammarAccess.getIncAccess().getVarAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Dec__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dec__Group__0__Impl
	rule__Dec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Dec__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecAccess().getDecKeyword_0()); }

	'dec ' 

{ after(grammarAccess.getDecAccess().getDecKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Dec__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dec__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Dec__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecAccess().getVarAssignment_1()); }
(rule__Dec__VarAssignment_1)
{ after(grammarAccess.getDecAccess().getVarAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__If__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__0__Impl
	rule__If__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getIfKeyword_0()); }

	'if ' 

{ after(grammarAccess.getIfAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__1__Impl
	rule__If__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getVarAssignment_1()); }
(rule__If__VarAssignment_1)
{ after(grammarAccess.getIfAccess().getVarAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__2__Impl
	rule__If__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getIfAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getValueAssignment_3()); }
(rule__If__ValueAssignment_3)
{ after(grammarAccess.getIfAccess().getValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Print__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Print__Group__0__Impl
	rule__Print__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrintAccess().getPrintKeyword_0()); }

	'print ' 

{ after(grammarAccess.getPrintAccess().getPrintKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Print__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Print__Group__1__Impl
	rule__Print__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrintAccess().getQuotationMarkKeyword_1()); }

	'"' 

{ after(grammarAccess.getPrintAccess().getQuotationMarkKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Print__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Print__Group__2__Impl
	rule__Print__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrintAccess().getMsgAssignment_2()); }
(rule__Print__MsgAssignment_2)
{ after(grammarAccess.getPrintAccess().getMsgAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Print__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Print__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrintAccess().getQuotationMarkKeyword_3()); }

	'"' 

{ after(grammarAccess.getPrintAccess().getQuotationMarkKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__Set__VarAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAccess().getVarIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getSetAccess().getVarIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Set__ValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAccess().getValueINTTerminalRuleCall_3_0()); }
	RULE_INT{ after(grammarAccess.getSetAccess().getValueINTTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Inc__VarAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncAccess().getVarIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getIncAccess().getVarIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Dec__VarAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecAccess().getVarIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getDecAccess().getVarIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__If__VarAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getVarIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getIfAccess().getVarIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__If__ValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getValueINTTerminalRuleCall_3_0()); }
	RULE_INT{ after(grammarAccess.getIfAccess().getValueINTTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Print__MsgAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrintAccess().getMsgSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getPrintAccess().getMsgSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


