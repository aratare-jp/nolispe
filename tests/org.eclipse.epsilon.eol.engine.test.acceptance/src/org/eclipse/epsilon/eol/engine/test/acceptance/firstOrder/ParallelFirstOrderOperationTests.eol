@test
operation testParallelSelect() {
	var data := Sequence {0..9};
	var selected = data.parallelSelect(n | (n > 3 and n <= 7) or n == 2);
	var expected := Sequence {2, 4, 5, 6, 7};
	assertEquals(expected, selected);
	selected = data.parallelSelect(n | n > 10);
	assertEquals(Sequence{}, selected);
	selected = data.parallelSelect(n | n < 10);
	assertEquals(data, selected);
	data = Bag{};
	selected = data.parallelSelect(e|e);
	assertEquals(selected.getClass(), data.getClass());
	assertTrue(data.isEmpty());
	assertEquals(selected.size(), data.size());
}

@test
operation testParallelSelectOne() {
	var data := Sequence {0..9};
	var selected = data.parallelSelectOne(n | n < 3 and n > 1);
	assertEquals(2, selected);
	selected = data.parallelSelectOne(n | n == 8);
	assertEquals(8, selected);
	selected = data.parallelSelectOne(n | n > 9);
	assertEquals(null, selected);
}

@test
operation testParallelReject() {
	var data := Sequence {0..9};
	var rejected = data.parallelReject(n | n < 1 or n > 6 or n == 5 and n <> 9);
	var expected := Sequence {1, 2, 3, 4, 6, 9};
	assertEquals(expected, rejected);
	rejected = data.parallelReject(n | n > 10);
	assertEquals(data, rejected);
	rejected = data.parallelReject(n | n < 10);
	assertEquals(Sequence{}, rejected);
}

@test
operation testParallelRejectOne() {
	var data := Sequence {0..9};
	var rejected = data.parallelRejectOne(n | n == 4);
	data.remove(4);
	assertEquals(data, rejected);
	data.add(4);
	rejected = data.parallelRejectOne(n | n > 9);
	assertEquals(data, rejected);
}

@test
operation testParallelExists() {
	var data := Sequence {0..9};
	var exists = data.parallelExists(n | n > 3 and n < 8);
	assertTrue(exists);
	exists = data.parallelExists(n | n < 0);
	assertFalse(exists);
}

@test
operation testParallelOne() {
	var data := Sequence {0..10};
	var one = data.parallelOne(n | n > 3 and n < 7);
	assertFalse(one);
	one = data.parallelOne(n | n == 2 or (n > 1 and n < 3));
	assertTrue(one);
	one = data.parallelOne(n | n < 0);
	assertFalse(one);
	one = data.parallelOne(n | n < 5, 5);
	assertFalse(one);
	one = data.parallelOne(n | n == 8, 0);
	assertTrue(one);
}

@test
operation testParallelNone() {
	var data := Sequence {0..10};
	var none = data.parallelNone(n | n == null);
	assertTrue(none);
	none = data.parallelNone(n | n > 7);
	assertFalse(none);
	none = data.parallelNone(n | n < 0, 10);
	assertTrue(none);
	none = data.parallelNone(n | n == 5, 1);
	assertFalse(none);
	none = data.parallelNone(n | n == null, 0);
	assertTrue(none);
}

@test
operation testParallelAtMostNMatch() {
	var data := Sequence {1..16};
	assertTrue(data.parallelAtMostNMatch(n | n.mod(3) == 0, 5));
	assertFalse(data.parallelAtMostNMatch(n | n.mod(2) == 0, 4));
	assertTrue(data.parallelAtMostNMatch(n | n > 1, 16));
	assertFalse(data.parallelAtMostNMatch(n | n == 5 or n == 11 or n == 0 or n == 16, 1));
	assertTrue(data.parallelAtMostNMatch(n | n <= 0 or n > 16, 0));
}

@test
operation testParallelAtLeastNMatch() {
	var data := Sequence {1..16};
	assertTrue(data.parallelAtLeastNMatch(n | n.mod(3) == 0, 5));
	assertFalse(data.parallelAtLeastNMatch(n | n.mod(2) == 0, 9));
	assertTrue(data.parallelAtLeastNMatch(n | n.mod(4) == 0, 3));
	assertFalse(data.parallelAtLeastNMatch(n | n <= 0 or n > 16, 1));
	assertTrue(data.parallelAtLeastNMatch(n | n <= 0 or n > 16, 0));
}

@test
operation testParallelNMatch() {
	var data := Sequence {1..11};
	var three = data.parallelNMatch(n | n.mod(3) == 0, 3);
	assertTrue(three);
	three = data.parallelNMatch(n | n.mod(2) == 0, 3);
	assertFalse(three);
	var twelve = data.parallelNMatch(n | n > 1, 12);
	assertFalse(twelve);
	var two = data.parallelNMatch(n | n == 5 or n == 11, 2);
	assertTrue(two);
	two = data.parallelNMatch(n | n == 0 or n == 10, 2);
	assertFalse(two);
	var twenty = data.parallelNMatch(n | n < 12, 20);
	assertFalse(twenty);
}

@test
operation testParallelCount() {
	var data := Sequence {-15..9};
	var actual = data.parallelCount(i | i > 0);
	assertEquals(9, actual);
	actual = data.parallelCount(i | i.mod(2) == 0 and i < -14);
	assertEquals(0, actual);
	actual = data.parallelCount(i | i == 0);
	assertEquals(1, actual);
	actual = data.parallelCount(i | true);
	assertEquals(data.size(), actual);
}

@test
operation testParallelForAll() {
	var data := Sequence {0..10};
	var forAll = data.parallelForAll(n | n > -1 and n <= 10);
	assertTrue(forAll);
	forAll = data.parallelForAll(n | n < 9);
	assertFalse(forAll);
	forAll = data.parallelForAll(n | n == 6, 1);
	assertFalse(forAll);
	forAll = data.parallelForAll(n | n <> null and n.asString().length() <= 2, 17);
	assertTrue(forAll);
}

@test
operation testParallelCollect() {
	var data := Sequence {0..9};
	var mapped = data.parallelCollect(n | n * n);
	var expected := Sequence {0, 1, 4, 9, 16, 25, 36, 49, 64, 81};
	assertEquals(expected, mapped);
	data = Sequence {12, 10, null, false, true, "str", 3.14, 8};
	mapped = data.parallelCollect(n | 10);
	expected := Sequence {10, 10, 10, 10, 10, 10, 10, 10};
	assertEquals(expected, mapped);
}

@test
operation testParallelSortBy() {
	var data = Bag {"a", "", true, false, "          __a_ ", "---", 22, 666666};
	var expected = Sequence {"", "a", 22, "---", true, false, 666666, "          __a_ "};
	var sorted = data.parallelSortBy(d | d.asString().length());
	assertEquals(expected, sorted);
}

@test
operation testParallelMapBy() {
	var data = Bag {"", 1, true, false, 98, 3, 55, 0, 4443, 768, 12024, "eol", 640, "four", "null"};
	var expected : new Map;
	expected.put(0, Sequence{""});
	expected.put(1, Sequence{1, 3, 0});
	expected.put(2, Sequence{98, 55});
	expected.put(3, Sequence{768, "eol", 640});
	expected.put(4, Sequence{true, 4443, "four", "null"});
	expected.put(5, Sequence{false, 12024});
	var actual = data.parallelMapBy(n | n.toString().length());
	assertEquals(expected, actual);
	data = Sequence{};
	actual = data.parallelMapBy(n | n.toString().length());
	assertTrue(actual.entrySet().isEmpty());
}
